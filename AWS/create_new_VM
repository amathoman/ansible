---
# provision instances
instance_loc: aws
name_prefix: "Ansibledemo"
ec2_vpc_id: ""
ec2_region: "ap-southeast-2"
username: "ansible"
user_count: "1"
ec2_windows_instance_type: "win2019_full"
ec2_vpc_subnet_id:
ec2_ami_ids: "t2.medium"

# Needed for AD and windows client provision
dns_domain_name: "ansibleworkshop.com"
dns_domain_name_short: "ansibleworkshop"
ldap_basedn: "DC=ansibleworkshop,DC=com"
domain_admin_password: "MyP@ssw0rd21"

tasks:
################### Create Security Groups ###################

- name: Windows | Create MS Windows security group
  ec2_group:
    name: "{{ name_prefix }}-windowssg"
    description: "Microsoft Windows SG"
    vpc_id: "{{ ec2_vpc_id }}"
    region: "{{ ec2_region }}"
    tags:
      Username: "{{ username }}"
      Info: "Username that provisioned this-> {{ username }}"
      Students: "{{ user_count }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "0.0.0.0/0"
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 5986
        to_port: 5986
        cidr_ip: "0.0.0.0/0"
      - proto: tcp
        from_port: 3389
        to_port: 3389
        cidr_ip: "0.0.0.0/0"
      - proto: all
        cidr_ip: "{{ ptr_zone_cidr }}"

################### Build Instances ###################

- name: Windows | Launch instance 1
  ec2:
    key_name: "{{ user }}-{{ name_prefix }}-key"
    group:
      - "{{ name_prefix }}-windowssg"
    instance_type: "{{ ec2_windows_instance_type }}"
    exact_count: 1
    count_tag:
      Name: "{{ name_prefix + '-s' + item + '-database'}}"
      App: AnsibleWorkshop
    instance_tags:
      Name: "{{ name_prefix + '-s' + item + '-database'}}"
      App: AnsibleWorkshop
      Workshop: "{{ name_prefix }}"
      Student: "{{ user_prefix + item }}"
      Username: "{{ user }}"
      Info: "Username that provisioned this-> {{ user }}"
      Students: "{{ user_count }}"
      short_name: "{{ 's' + item + '-database' }}"
      long_name: "{{ 's' + item + '-database' }}.{{ name_prefix }}.{{ public_dns_zone | default('') }}"
      os_type: windows
    image: "{{ ec2_ami_ids }}"
    wait: true
    region: "{{ ec2_region }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    user_data: "{{ lookup('template', 'win_ec2_user_data.j2', template_vars=dict(vm_name='s' + item + '-database')) }}"
    assign_public_ip: yes
  with_sequence: count={{user_count}}
  register: windows1_jobs
  async: 7200
  poll: 0
